[core]
	editor = vi
[push]
	default = current
[alias]
	cm = checkout master
	rem = rebase master
	mm = merge master
	stf = status --untracked-files
	df = difftool
	pr = pull --rebase
	this = rev-parse --abbrev-ref HEAD
	unstage = reset HEAD --
	pushit = "!git push -u origin $(git this)"
	track = "!git branch --set-upstream-to=origin/$(git this) $(git this)"
	nuke = "!git reset --hard origin/$(git this)"
	do = "!git diff origin/$(git this)"
	dfo = "!git difftool origin/$(git this)"
	dm = "!git diff $(git merge-base master $(git this))"
	dfm = "!git difftool $(git merge-base master $(git this))"
	da = "!f() { git diff $(git merge-base $1 $(git this)) ${@:2}; }; f"
	dfa = "!f() { git difftool $(git merge-base $1 $(git this)) ${@:2}; }; f"
	destroy = "!f() { git branch -D $1; git push origin --delete $1; }; f"
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lga = log --all --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lb = "!f() { git for-each-ref --shell refs/heads --format='%(refname:short) %(upstream:track,nobracket) %(upstream:trackshort)' | awk -F\"'\" '{if ($4) {print $2 \" \\033[1;31m\" $4 \"\\033[0m\"} else if ($6) {print $2} else {print $2 \" \\033[1;31mlocal only\\033[0m\"}}'; }; f"
	lt = tag --list --format='%(refname:short)%09%(subject)' --sort='-v:refname'
	cg = "!f() { MATCHES=( $(git for-each-ref refs/heads/ --format='%(refname:short)' | grep ${@:-' '}) ); case ${#MATCHES[@]} in 0) echo \"No branches matched '$@'\";; 1) git checkout ${MATCHES[0]};; *) echo \"More than one branches matched '$@'\";; esac; }; f"
	cgh = "!f() { git fetch origin pull/$1/head:pull-$1; git checkout pull-$1; }; f"
[diff]
	tool = meld
[merge]
	tool = meld
[mergetool]
	keepBackup = false
[fetch]
	prune = true
[include]
	path = ./local.git
