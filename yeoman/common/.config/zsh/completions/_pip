#compdef pip pip2 pip3

_pip_all() {
    if (( ! $+piplist )); then
        zsh-pip-cache-packages
        piplist=($(cat $ZSH_PIP_CACHE_FILE))
    fi
}

_pip_installed() {
    installed_pkgs=($(pip freeze | cut -d '=' -f 1))
}

local -a _1st_arguments
_1st_arguments=(
    'check:verify installed packages have compatible dependencies'
    'completion:a helper command used for command completion'
    'config:manage local and global configuration'
    'download:download packages'
    'hash:compute hashes of package archives'
    'help:show help for commands'
    'install:install packages'
    'freeze:output installed packages in requirements format'
    'list:list installed packages'
    'search:search PyPI for packages'
    'show:show information about installed packages'
    'uninstall:uninstall packages'
    'wheel:build wheels from your requirements'
)

local expl
local -a all_pkgs installed_pkgs

_arguments \
    '(-h --help)'{-h,--help}'[show help]' \
    '(--isolated)--isolated[run pip in an isolated mode, ignores environment variables and user configuration]' \
    '(-v --verbose)'{-v,--verbose}'[give more output (option is additive, and can be used up to 3 times)]' \
    '(-V --version)'{-V,--version}'[show version and exit]' \
    '(-q --quiet)'{-q,--quiet}'[give less output (option is additive, and can be used up to 3 times)]' \
    '(--log)--log[path to a verbose appending log]' \
    '(--proxy)--proxy[specify a proxy in the form user:passwd@proxy.server:port]' \
    '(--retries)--retries[maximum number of retries each connection should attempt (default 5 times)]' \
    '(--timeout)--timeout[set the socket timeout (default 15 seconds)]' \
    '(--exists-action)--exists-action[default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort)]' \
    '(--trusted-host)--trusted-host[mark this host as trusted, even though it does not have valid or any HTTPS]' \
    '(--cert)--cert[path to alternate CA bundle]' \
    '(--client-cert)--client-cert[path to SSL client certificate, a single file containing the private key and the certificate in PEM format]' \
    '(--cache-dir)--cache-dir[store the cache data in <dir>]' \
    '(--no-cache-dir)--no-cache-dir[disable the cache]' \
    '(--disable-pip-version-check)--disable-pip-version-check[do not periodically check PyPI to determine whether a new version of pip is available for download]' \
    '(--no-color)--no-color[suppress colored output]' \
    '*:: :->subcmds' && return 0

if (( CURRENT == 1 )); then
    _describe -t commands "pip subcommand" _1st_arguments
    return
fi

case "$words[1]" in
    search)
        _arguments \
            '(-i --index)'{-i,--index}'[base URL of Python Package Index (default https://pypi.org/pypi)]' ;;
    freeze)
        _arguments \
            '(-r --requirement)'{-r,--requirement}'[use the order in the given requirements file and its comments when generating output (this option can be used multiple times)]' \
            '(-f --find-links)'{-f,--find-links}'[URL for finding packages, which will be added to the output]' \
            '(-l --local)'{-l,--local}'[if in a virtualenv that has global access, do not output globally-installed packages]' \
            '(--user)--user[only output packages installed in user-site]' \
            '(--all)--all[do not skip these packages in the output: wheel, distribute, setuptools, pip]' \
            '(--exclude-editable)--exclude-editable[exclude editable package from output]' ;;
    install)
        _arguments \
            '(-U --upgrade)'{-U,--upgrade}'[upgrade all packages to the newest available version]' \
            '(-f --find-links)'{-f,--find-links}'[URL for finding packages]' \
            '(-r --requirement)'{-r,--requirement}'[Requirements file for packages to install]:File:_files' \
            '(--no-deps --no-dependencies)'{--no-deps,--no-dependencies}'[iIgnore package dependencies]' \
            '(--no-install)--no-install[only download packages]' \
            '(--no-download)--no-download[only install downloaded packages]' \
            '(--install-option)--install-option[extra arguments to be supplied to the setup.py]' \
            '(--single-version-externally-managed)--single-version-externally-managed[do not download/install dependencies. requires --record or --root]'\
            '(--root)--root[treat this path as a fake chroot, installing into it. implies --single-version-externally-managed]'\
            '(--record)--record[file to record all installed files to.]'\
            '(-r --requirement)'{-r,--requirement}'[requirements file]: :_files'\
            '(-e --editable)'{-e,--editable}'[path of or url to source to link to instead of installing.]: :_files -/'\
            '1: :->packages' &&  return 0

        if [[ "$state" == packages ]]; then
            _pip_all
            _wanted piplist expl 'packages' compadd -a piplist
        fi ;;
    uninstall)
        _pip_installed
        _wanted installed_pkgs expl 'installed packages' compadd -a installed_pkgs ;;
    show)
        _pip_installed
        _wanted installed_pkgs expl 'installed packages' compadd -a installed_pkgs ;;
esac
